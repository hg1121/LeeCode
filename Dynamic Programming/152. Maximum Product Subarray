152. Maximum Product Subarray

Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        ### TLE ###
#         if not nums:
#             return
#         elif len(nums) == 1:
#             return nums[0]
#         res = []
#         for i in range(len(nums)):
#             dp = [0] * (len(nums)-i)
#             dp[0] = nums[i]
#             for j in range(i+1,len(nums)):
#                 if nums[j] == 0:
#                     res.append(max(0,max(nums[i:]),max(dp[:j-i])))
#                 else:
#                     dp[j-i] = dp[j-i-1]*nums[j]
#             res.append(max(max(nums[i:]),max(dp)))
#         return max(res)
    
        ### 
        # A = nums[::-1]
        # for i in range(1, len(nums)):
        #     nums[i] *= nums[i - 1] or 1
        #     A[i] *= A[i - 1] or 1
        # return max(nums + A)
        
        maximum=big=small=nums[0]
        for n in nums[1:]:
            big, small=max(n, n*big, n*small), min(n, n*big, n*small)
            maximum=max(maximum, big)
        return maximum