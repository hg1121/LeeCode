338. Counting Bits

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

class Solution:
    def countBits(self, num: int) -> List[int]:
        ### by self ###
        # res = [0]
        # if num == 0:
        #     return [0]
        # for i in range(1,num+1):
        #     count = 0
        #     while i >= 1:
        #         if i == 1:
        #             if count == 0:
        #                 res.append(1)
        #                 break
        #             else:
        #                 count += 1
        #                 res.append(count)
        #                 break
        #         else:
        #             if i % 2 == 0:
        #                 i = i // 2
        #             else:
        #                 count += 1
        #                 i = i //2
        # return res 
        
        iniArr = [0]
        if num > 0:
            amountToAdd = 1
            while len(iniArr) < num + 1:
                iniArr.extend([x+1 for x in iniArr])
        
        return iniArr[0:num+1]