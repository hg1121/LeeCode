392. Is Subsequence

Given a string s and a string t, check if s is subsequence of t.

You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (<=100).

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
s = "abc", t = "ahbgdc"

Return true.

Example 2:
s = "axc", t = "ahbgdc"

Return false.

Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

# from collections import defaultdict
# from bisect import bisect_left
class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        ### by self ###
        if len(s) == 0:
            return True
        elif len(t) == 0:
            return False
        s = list(s)
        for i in range(len(t)):
            if t[i] == s[0]:
                s.pop(0)
            if len(s) == 0:
                return True
        return False
    
    ### binary search ###
#     def createMap(self, s):
#         # create a map. key is char. value is index of apperance in acending order. 
#         posMap = defaultdict(list)
#         for i, char in enumerate(s):
#             posMap[char].append(i)
#         return posMap
        
    
#     def isSubsequence(self, s, t):
#         """
#         :type s: str
#         :type t: str
#         :rtype: bool
#         """
#         posMap = self.createMap(t)
#         # lowBound is the minimum index the current char has to be at.
#         lowBound = 0
#         for char in s:
#             if char not in posMap: return False
#             charIndexList = posMap[char]
#             # try to find an index that is larger than or equal to lowBound
#             i = bisect_left(charIndexList, lowBound) # 返回 如果要把 lowBound 插入到 charIndexList 中，lowBound 对应的index， 如果 lowBound 的插入位置是charIndexList的最后一位 则证明该 s 中出现的字母顺序和 t 不对应。

#             if i == len(charIndexList): return False
#             lowBound = charIndexList[i] + 1
#         return True