414. Third Maximum Number

Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:
Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:
Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:
Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

class Solution(object):
    def thirdMax(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = list(set(nums))
        res.sort()
        return res[-3] if len(res) > 2 else res[-1]
    
    
        # res = [] 
        # [res.append(x) for x in nums if x not in res] 
        # res.sort()
        # if len(res) == 1:
        #     return res[0]
        # elif len(res) == 2:
        #     return max(res)
        # else: 
        #     return res[-3]
        
        # ## O(n) tme O(1)space####
        # m1 = m2 = m3 = -float("inf")
        # for num in nums:
        #     if num > m1:
        #         m1, m2, m3 = num, m1, m2
        #     elif m2 < num < m1:
        #         m2, m3 = num, m2
        #     elif m3 < num < m2:
        #         m3 = num
        # return m3 if m3 > -float("inf") else m1