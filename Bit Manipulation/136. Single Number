136. Single Number

Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
    	#####by self
        # res = []
        # for i in range(len(nums)):
        #     if nums[i] not in res:
        #         res.append(nums[i])
        #     else:
        #         res.remove(nums[i])
        # return res[0]
        
        #####
        # for i in range(1,len(nums)):
        #     nums[0] ^= nums[i]
        # return nums[0]
        
        #####
        from collections import Counter
        a =Counter(nums)
        for k,i in a.items():
            if i < 2:
                return k
            
        #####
        # dic = {}
        # for num in nums:
        #     dic[num] = dic.get(num, 0)+1
        # for key, val in dic.items():
        #     if val == 1:
        #         return key