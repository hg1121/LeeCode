3. Longest Substring Without Repeating Characters

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.


class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        ### by self almost TLE ###
        # if not s:
        #     return 0
        # if s == ' ':
        #     return 1
        # s = [i for i in s]
        # unique = []
        # length = 0
        # maxlen = 0
        # i = 0
        # start = 0
        # while i < len(s):
        #     if s[i] not in unique:
        #         unique.append(s[i])
        #         i += 1
        #         length += 1
        #         maxlen = max(length,maxlen)
        #     else:
        #         unique = []
        #         ind = s[start:i].index(s[i])
        #         start += ind + 1
        #         i = start
        #         maxlen = max(length,maxlen)
        #         length = 0
        # return maxlen
        
        
        ### Time Complexity O(n) ###
        start = maxLength = 0
        usedChar = {}        
        for i in range(len(s)):
            if s[i] in usedChar and start <= usedChar[s[i]]:
                start = usedChar[s[i]] + 1
            else:
                maxLength = max(maxLength, i - start + 1)
            usedChar[s[i]] = i
        return maxLength             